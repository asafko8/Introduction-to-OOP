asafko8
208936625

1. package image_char_matching: CharConverter class - The class converts characters to a binary "image" (2D
    array of booleans).
    SubImgCharMatcher - Responsible for matching an ASCII character to a sub image with a given brightness.
   package image: Image class - Represents an image on the computer by a two-dimensional array of objects of
    type Color.
    ImageProcessing class - Responsible for processing and preparing the image to the run of the
    AsciiArtAlgorithm. It's composites an instance of Image as the image we need to process and use it's
    functionality to do so.
   package ascii_art: AsciiArtAlgorithm class - Responsible for running the algorithm. It's composites an
    instance of ImageProcessing to process the image input of the user, and instance of the SubImgCharMatcher
    to find the right character for each of the sub-images.
    Shell class - Responsible for the UI operations. It's composites an instance of ImageProcessing and
    SubImgCharMatcher to use their functionality in order to execute the user prompts and to send to
    AsciiArtAlgorithm for the run of the algorithm. It is also composites the interface AsciiOutput and
    the classes ConsoleAsciiOutput and HtmlAsciiOutput for the use in the outputting process.
    KeyboardInput class - Responsible for receiving input from the user.
   package exceptions: IncorrectFormatException class - Represents exception caused by incorrect format
    issues.
    ExecuteException class - Represents exception caused by execute issues.
    ExceedingBoundsException - Represents exception caused by the attempt of getting higher/lower resolution
    then the image limit.
2. I used only one java data structure in this program, in the SubImgCharMatcher, that holds the data about a
   character and it's brightness value. The data structure i used is an HashMap, where the keys are the
   characters and the values is their brightness values, so i can have an O(1) average access.
   For the sub-images and their brightness values i used a primitive double array, where only the brightness
   values are stored and their indexes in the array use as the "keys" of the sub-images. I will also note that
   i didn't see a reason to use a java data structure and to waste more memory, because the data stored there
   is not gonna change or gain more or less from it. In any change from the user (image or resolution) there
   will be a new sub-images with a different data for each.
3. I used the java exception mechanism to throws the suitable exception and there for to print informative
   errors massages to the user. I created 3 classes, each one responsible to a different type of exception and
   by holding a string data member with more informative error type, and implements a getter method for this
   data member i succeeded to throw the most appropriate exception. In the Shell class, I split every
   functionality of the Shell into different methods so that each of them throws the correct exception for the
    case, while the run method catches them and prints the informative massages.
4. I added one method, a getter for the character set the Shell can use it's functionality, such as add,
   remove, clear, and etc.
5. No changes.
